1. Use: Sort an array of 0’s, 1’s, and 2’s

2. Algorithm:
   - Take three-pointers, namely — low, mid, high.
   - We use low and mid pointers at the start, and the high pointer will point at the end of the given array.
   - low is for 0’s, mid is for 1’s and high is for 2’s
     1. Index 0 to low - this is the "bottom group" (O’s)
     2. Index low to mid - this is the "middle group" (1’s)
     3. Index mid to high - this is the "top group" (2’s)
   - If array [mid] =0, then swap array [mid] with array [low] and increment both pointers once.
   - If array [mid] = 1, then no swapping is required. Increment mid pointer once.
   - If array [mid] = 2, then we swap array [mid] with array [high] and decrement the high pointer once.
   
   
